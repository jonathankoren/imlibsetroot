#!/usr/bin/perl

# Copyright (C) 2010, Jonathan Koren <jonathan@jonathankoren.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies of the Software, its documentation and marketing & publicity
# materials, and acknowledgment shall be given in the documentation, materials
# and software packages that this Software was used.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
# IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\
#

# macosx_imlibsetroot
#
# Provides MacOSX support for imlibsetroot.  Usage is identical to imlibsetroot.

$| = 1;

use FileHandle;
use IPC::Open2;
use POSIX ":sys_wait_h";

$IMLIBSETROOT = "/Users/jkoren/Downloads/imlibsetroot-1.6/imlibsetroot";
$OSASCRIPT    = "/usr/bin/osascript";


# AppleScript refuses to run on dot-files
$stored_file = "$ENV{HOME}/background-".time.".png";
$found_store = 0;
for ($i = 0; $i <= $#ARGV; $i++)
{
    if ($ARGV[$i] eq "--store")
    {
        if (($ARGV[$i+1] !~ /^-/) && (($i + 1) <= $#ARGV))
        {
            $stored_file = $ARGV[$i+1];
        }
        else
        {
            $stored_file = $ENV{HOME} . "/.background.png";
        }

        $found_store = 1;
        last;
    }
}

# Ensure a full pathname
if ($stored_file !~ m!^/!)
{
    $stored_file = $ENV{PWD} . "/" . $stored_file;
}

# Force image storing, because things that use GConf (e.g. Nautilus) insist
# on using filenames.
if (! $found_store)
{
    # unshift these individually, because we want to escape spaces
    # in filenames later
    unshift(@ARGV, $stored_file);
    unshift(@ARGV, "--store");
}

# Force storing slices
unshift(@ARGV, "--storeslices");

# remove stale backgrounds
opendir(HOME, $ENV{HOME}) or die "can't opendir $ENV{HOME}: $!";
foreach $old_filename (grep(/^background-\d+\.png/, readdir(HOME)))
{
    unlink "$ENV{HOME}/$old_filename" or warn "can't unlink $old_filename: $!"
}
closedir(HOME);

# lookup the name of the volume containing the home directory
$topdir = pipe_to_applescript(
  'tell application "System Events"' . "\n" .
  'set homedir to the home directory of the current user as string' . "\n" .
  'set AppleScript\'s text item delimiters to ":"' . "\n" .
  'set topdir to item 1 of text items of homedir' . "\n" .
  'end tell' . "\n"
);

# run imlibsetroot
$cmdline = "$IMLIBSETROOT ";
foreach (@ARGV) {
	s/ /\\ /g;
	$cmdline .= " $_";
}

$retcode = system($cmdline);

# ignore X errors
exit -1 if ($retcode != 0) && ($retcode != 256);


# macify filename, for applescript
$stored_file =~ s!/!:!g;
$stored_file = $topdir . $stored_file;



# find basenames of slices
$dot = rindex($stored_file, ".");
$basename      = substr($stored_file, 0, $dot);
$dot_extension = substr($stored_file, $dot);

# get names of desktops
@desktopnames = split(/, /, pipe_to_applescript(
  'tell application "System Events"' . "\n" .
  'get display name of every desktop' . "\n" .
  'end tell' . "\n"
));


# do the actual setting of the backgrounds
$ascript  = 'tell application "System Events"' . "\n";
$ascript .= "set theDesktops to a reference to every desktop\n";
for ($i = 0; $i <= $#desktopnames; $i++)
{
    # disable changing (i.e. "rotating") the desktop image on some event
    #$ascript .= 'set picture of item ' . ($i + 1) . ' of theDesktops rotation to 0' . "\n";
    $ascript .= 'set picture of item ' . ($i + 1) . ' of theDesktops to file "' . $basename . $i . $dot_extension . '"' . "\n";
}
$ascript .= 'end tell' . "\n";
pipe_to_applescript($ascript);

################################################################################
sub pipe_to_applescript {
    my ($ascript) = @_;
    local(*TO_OSASCRIPT, *FROM_OSASCRIPT, $_);
    my $response = '';

    $pid = open2(*FROM_OSASCRIPT, *TO_OSASCRIPT, "/usr/bin/osascript" );

    print TO_OSASCRIPT "$ascript\n";
    close TO_OSASCRIPT;

    while (<FROM_OSASCRIPT>) 
    {
        $response .= $_;
    }
    close FROM_OSASCRIPT;

    chomp $response;
    waitpid($pid, WNOHANG);

    return $response;
}
